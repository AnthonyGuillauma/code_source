"""
Modules des tests unitaires pour l'affichage d'informations dans la CLI.
"""

import pytest
from time import sleep
from io import StringIO
from cli.afficheur_cli import AfficheurCLI

# Donn√©es
messages = [
    "Un message normal",
    "Test\r avec des \ncaract√®res\t sp√©ciaux",
    "Test d'un message tr√®s long" * 1000,
    "\033[31mTest avec couleur\033[0m",
    "üéâ Test avec des unicodes üéâ"
]

# Tests unitaires

@pytest.mark.parametrize("message", messages)
def test_afficheur_cli_affiche_message(mocker, afficheur_cli, message):
    """
    V√©rifie que la m√©thode affiche_message affiche correctement les messages avec la bonne
    couleur dans le terminal.

    Sc√©narios test√©s:
        - Passage d'un message √† la m√©thode.

    Asserts:
        - Le message est le m√™me que celui fourni avec la bonne couleur.

    Args:
        mocker (MockerFixture): Fixture qui permet de modifier le stdout.
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
        message (str): Message √† afficher.
    """
    # Remplacement de la sortie standard par un StringIO (nomm√© sortie_cli)
    with mocker.patch("sys.stdout", new_callable=StringIO) as sortie_cli:
        afficheur_cli.affiche_message(message)
        assert sortie_cli.getvalue() == afficheur_cli.COULEUR_MESSAGE_NORMAL + message + "\n"

def test_afficheur_cli_exception_affiche_message_type(afficheur_cli):
    """
    V√©rifie que la m√©thode affiche_message l√®ve une exception TypeError
    lorsque l'argument fourni n'est pas une cha√Æne de caract√®res.

    Sc√©narios test√©s:
        - Passage d'un entier √† la m√©thode.

    Asserts:
        - V√©rifie que l'exception TypeError est lev√©e.

    Args:
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
    """
    with pytest.raises(TypeError):
        afficheur_cli.affiche_message(123)

@pytest.mark.parametrize("message, exception", [
    ("Un message d'erreur !", Exception("Erreur g√©n√©rale !")),
    ("Erreur de typage !", TypeError("Une variable str √©tait attendue !")),
    ("Erreur dans la recherche !", FileNotFoundError("Fichier non trouv√© !"))
])
def test_afficheur_cli_affiche_erreur(mocker, afficheur_cli, message, exception):
    """
    V√©rifie que la m√©thode affiche_erreur affiche correctement les messages d'erreur
    dans le terminal avec la couleur ad√©quate.

    Sc√©narios test√©s:
        - Affichage d'erreurs avec diff√©rents types d'exceptions.

    Asserts:
        - V√©rifie que le message d'erreur et l'exception sont bien affich√©s.

    Args:
        mocker (MockerFixture): Fixture pour modifier le stdout.
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
        message (str): Message d'erreur √† afficher.
        exception (Exception): Exception associ√©e √† l'erreur.
    """
    # Remplacement de la sortie standard par un StringIO (nomm√© sortie_cli)
    with mocker.patch("sys.stdout", new_callable=StringIO) as sortie_cli:
        afficheur_cli.affiche_erreur(message, exception)
        assert sortie_cli.getvalue() == (afficheur_cli.COULEUR_MESSAGE_ERREUR + 
                                         message + "\n" + str(exception) + "\n")

@pytest.mark.parametrize("message, exception", [
    (False, Exception("Erreur g√©n√©rale !")),
    ("Erreur de typage !", False)
])  
def test_afficheur_cli_exception_affiche_erreur_type(afficheur_cli, message, exception):
    """
    V√©rifie que la m√©thode affiche_erreur l√®ve une exception TypeError
    lorsque les arguments ne sont pas du bon type.

    Sc√©narios test√©s:
        - Passage d'un mauvais type pour le param√®tre ``message``.
        - Passage d'un mauvais type pour le param√®tre ``exception``.

    Asserts:
        - V√©rifie que l'exception TypeError est lev√©e.

    Args:
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
        message (Any): Valeur incorrecte √† tester.
        exception (Any): Valeur incorrecte √† tester.
    """
    with pytest.raises(TypeError):
        afficheur_cli.affiche_erreur(message, exception)

@pytest.mark.parametrize("message", messages)
def test_afficheur_cli_reecrire_ligne(mocker, afficheur_cli, message):
    """
    V√©rifie que la m√©thode reecrire_ligne affiche correctement un message
    sur la m√™me ligne du terminal.

    Sc√©narios test√©s:
        - Affichage de plusieurs messages.

    Asserts:
        - V√©rifie que la sortie standard contient le message format√©.

    Args:
        mocker (MockerFixture): Fixture pour modifier le stdout.
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
        message (str): Message √† afficher.
    """
    # Remplacement de la sortie standard par un StringIO (nomm√© sortie_cli)
    with mocker.patch("sys.stdout", new_callable=StringIO) as sortie_cli:
        afficheur_cli.reecrire_ligne(message)
        assert sortie_cli.getvalue() == "\r" + afficheur_cli.COULEUR_MESSAGE_NORMAL + message

def test_afficheur_cli_exception_reecrire_ligne_type(afficheur_cli):
    """
    V√©rifie que la m√©thode reecrire_ligne l√®ve une exception TypeError
    lorsqu'un argument de type incorrect est fourni.

    Sc√©narios test√©s:
        - Passage d'un entier au lieu d'une cha√Æne de caract√®res.

    Asserts:
        - V√©rifie que l'exception TypeError est lev√©e.

    Args:
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
    """
    with pytest.raises(TypeError):
        afficheur_cli.reecrire_ligne(123)

def test_afficheur_cli_lance_animation_chargement(mocker, afficheur_cli):
    """
    V√©rifie que la m√©thode lance_animation_chargement d√©marre bien un thread
    pour l'animation de chargement.

    Sc√©narios test√©s:
        - Lancement de l'animation de chargement.

    Asserts:
        - V√©rifie que le thread est bien initialis√© et actif.

    Args:
        mocker (MockerFixture): Fixture pour modifier les m√©thodes internes.
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
    """
    mocker.patch.object(afficheur_cli, "_animation_chargement", side_effect=lambda: sleep(10))
    assert afficheur_cli._thread_chargement is None
    afficheur_cli.lance_animation_chargement()
    assert afficheur_cli._thread_chargement is not None
    assert afficheur_cli._thread_chargement.is_alive()

def test_afficheur_cli_exception_stop_animation_chargment_type_invalide(afficheur_cli):
    """
    V√©rifie que la m√©thode stop_animation_chargement renvoie une erreur lorsque le type
    de son param√®tre est invalide.

    Sc√©narios test√©s:
        - Param√®tre ``erreur`` avec un mauvais type.

    Asserts:
        - Une exception :class:`TypeError` est lev√©e.

    Args:
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
    """
    with pytest.raises(TypeError):
        afficheur_cli.stop_animation_chargement("False")

def test_afficheur_cli_stop_animation_chargement_terminee(afficheur_cli):
    """
    V√©rifie que la m√©thode stop_animation_chargement arr√™te correctement l'animation en
    cas de demande d'arr√™t suite √† une fin de chargement normale.

    Sc√©narios test√©s:
        - Arr√™t normal de l'animation de chargement.

    Asserts:
        - V√©rifie que le thread est bien arr√™t√©.
        - V√©rifie que le flag d'arr√™t normale est activ√©.

    Args:
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
    """
    afficheur_cli.lance_animation_chargement()
    afficheur_cli.stop_animation_chargement()
    assert afficheur_cli._thread_chargement is None
    assert afficheur_cli._thread_chargement is None
    assert afficheur_cli._thread_chargement_termine.is_set()

def test_afficheur_cli_stop_animation_chargement_erreur(afficheur_cli):
    """
    V√©rifie que la m√©thode stop_animation_chargement arr√™te correctement l'animation en
    cas de demande d'arr√™t suite √† une erreur.

    Sc√©narios test√©s:
        - Arr√™t normal de l'animation de chargement.

    Asserts:
        - V√©rifie que le thread est bien arr√™t√©.
        - V√©rifie que le flag d'arr√™t d'erreur est activ√©.

    Args:
        afficheur_cli (AfficheurCLI): Fixture pour l'instance de la classe ``AfficheurCLI``.
    """
    afficheur_cli.lance_animation_chargement()
    afficheur_cli.stop_animation_chargement(True)
    assert afficheur_cli._thread_chargement is None
    assert afficheur_cli._thread_chargement_erreur.is_set()